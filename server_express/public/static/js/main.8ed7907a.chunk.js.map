{"version":3,"sources":["components/TodoListTemplate.js","actions/index.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["TodoListTemplate","form","children","className","process","apiUrl","Form","state","input","handleChange","e","setState","target","value","handleCreate","props","addTodo","text","checked","handleKeyPress","key","this","onChange","onKeyPress","onClick","Component","connect","todo","dispatch","axios","post","then","res","type","payload","data","catch","error","console","log","TodoItem","handleRemove","id","removeTodo","handleToggle","toggleTodo","stopPropagation","delete","put","TodoItemList","fetchAllTodos","nextProps","nextState","todos","todoList","map","get","App","Boolean","window","location","hostname","match","initialState","store","createStore","action","Object","assign","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mVAmBeA,G,MAhBU,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SAC7B,OACI,0BAAMC,UAAU,sBACZ,yBAAKA,UAAU,SAAf,4BACUC,2BADV,KAGA,6BAASD,UAAU,gBACdF,GAEL,6BAASE,UAAU,iBACbD,M,yBCZZG,EAASD,kCCITE,E,2MAEFC,MAAQ,CACJC,MAAO,I,EAEXC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVH,MAAOE,EAAEE,OAAOC,S,EAGxBC,aAAe,WAEX,EAAKC,MAAMC,QACP,CACIC,KAAM,EAAKV,MAAMC,MACjBU,SAAS,IAEjB,EAAKP,SAAS,CAAEH,MAAO,M,EAE3BW,eAAiB,SAACT,GAEA,UAAVA,EAAEU,KACF,EAAKN,gB,wEAGH,IAEEN,EAAUa,KAAKd,MAAfC,MACDC,EAA8CY,KAA9CZ,aAAcK,EAAgCO,KAAhCP,aAAcK,EAAkBE,KAAlBF,eAEnC,OACI,yBAAKhB,UAAU,QACX,2BAAOU,MAAOL,EAAOc,SAAUb,EAC3Bc,WAAYJ,IAChB,yBAAKhB,UAAU,gBAAgBqB,QAASV,GAAxC,qB,GAlCGW,aAwCJC,cAAQ,KAAM,CAAEV,QDrBR,SAACW,GACpB,OAAO,SAACC,GACJC,IAAMC,KAAKzB,EAAQsB,GACdI,MAAK,SAAAC,GACFJ,EAAS,CACLK,KAzBI,WA0BJC,QAASF,EAAIG,UAGpBC,OAAM,SAAAC,GAEH,MADAC,QAAQC,IAAIF,GACLA,QCURX,CAA2BpB,GCtCpCkC,G,iNAMFC,aAAe,SAACC,GACZ,EAAK3B,MAAM4B,WAAWD,I,EAG1BE,aAAe,SAACjB,GACZ,EAAKZ,MAAM8B,WAAWlB,I,wEAIhB,IAAD,EACyBN,KAAKN,MAA3BE,EADH,EACGA,KAAMC,EADT,EACSA,QAASwB,EADlB,EACkBA,GACfD,EAA+BpB,KAA/BoB,aAAcG,EAAiBvB,KAAjBuB,aACtB,OACI,yBAAKzC,UAAU,YAAYqB,QAAS,WAChC,IAAMG,EAAO,CAAEe,KAAIzB,OAAMC,WACzBS,EAAKT,SAAWS,EAAKT,QACrB0B,EAAajB,KAEb,yBAAKxB,UAAU,SAASqB,QAAS,SAACd,GAC9BA,EAAEoC,kBACFL,EAAaC,KAFjB,QAIA,yBAAKvC,UAAS,oBAAee,GAAW,YACpC,6BAAMD,IAGNC,GAAY,yBAAKf,UAAU,cAAf,e,GAhCTsB,cAuCRC,cAAQ,KAAM,CAAEiB,WFNL,SAAAD,GACtB,OAAO,SAACd,GACJC,IAAMkB,OAAN,UAAgB1C,EAAhB,YAA0BqC,IACrBX,MAAK,SAAAC,GACFJ,EAAS,CACLK,KAxCO,cAyCPC,QAASF,EAAIG,UAGpBC,OAAM,SAAAC,GAEH,MADAC,QAAQC,IAAIF,GACLA,OELoBQ,WFUjB,SAAAlB,GACtB,OAAO,SAACC,GACJC,IAAMmB,IAAN,UAAa3C,EAAb,YAAuBsB,EAAKe,IAAMf,GAC7BI,MAAK,SAAAC,GACFJ,EAAS,CACLK,KAvDO,cAwDPC,QAASF,EAAIG,UAGpBC,OAAM,SAAAC,GAEH,MADAC,QAAQC,IAAIF,GACLA,QErBRX,CAA0Cc,GC1CnDS,E,4LAGF5B,KAAKN,MAAMmC,kB,4CAGSC,EAAWC,GAC/B,OAAO/B,KAAKN,MAAMsC,QAAUF,EAAUE,Q,+BAG9B,IAEFC,EADYjC,KAAKN,MAAfsC,MACeE,KAAI,gBAAGb,EAAH,EAAGA,GAAIzB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,QAAb,OACzB,kBAAC,EAAD,CACEwB,GAAIA,EACJzB,KAAMA,EACNC,QAASA,EACTE,IAAKsB,OAGT,OAAO,6BAAMY,O,GApBU7B,aA8BZC,eANS,SAAAnB,GACtB,MAAO,CACL8C,MAAO9C,EAAM8C,SAIuB,CAAEH,cH3Bb,WACzB,OAAO,SAACtB,GACJC,IAAM2B,IAAInD,GACL0B,MAAK,SAAAC,GACFJ,EAAS,CAGLK,KAXO,cAYPC,QAASF,EAAIG,UAGpBC,OAAM,SAAAC,GAEH,MADAC,QAAQC,IAAIF,GACLA,QGcRX,CAA4CuB,GCX5CQ,E,2MAjBblD,MAAQ,CACN8C,MAAO,I,wEAIP,OACE,kBAAC,EAAD,CACEpD,KACE,kBAAC,EAAD,OAGF,kBAAC,EAAD,W,GAZUwB,aCOEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCjBN,IAAMC,EAAe,CACjBV,MAAO,CACH,CACIX,GAAI,EACJzB,KAAM,GACNC,SAAS,K,QCKf8C,EAAQC,uBDDa,WAAmC,IAAlC1D,EAAiC,uDAAzBwD,EAAcG,EAAW,uCACzD,OAAQA,EAAOjC,MACX,INTmB,cMWnB,INVgB,WMYhB,INXmB,cManB,INZmB,cMaf,OAAOkC,OAAOC,OAAO,GAAI7D,EAAO,CAAE8C,MAAOa,EAAOhC,UACpD,QACI,OAAO3B,KCVoB8D,8BAAoBC,0BAAgBC,OAE3EC,IAASC,OACL,kBAAC,IAAD,CAAUT,MAAOA,GACb,kBAAC,EAAD,OACSU,SAASC,eAAe,SFmHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,MAAK,SAAAgD,GACjCA,EAAaC,kB","file":"static/js/main.8ed7907a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({form, children}) => {\r\n    return (\r\n        <main className=\"todo-list-template\">\r\n            <div className=\"title\">\r\n                오늘할일({process.env.REACT_APP_TITLE})\r\n            </div>\r\n            <section className=\"form-wrapper\">\r\n                {form}\r\n            </section>\r\n            <section className=\"todos-wrapper\">\r\n                { children }\r\n            </section>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default TodoListTemplate;","import axios from 'axios';\r\nconst apiUrl = process.env.REACT_APP_APIURL;\r\n//Action type 정의\r\nexport const FETCH_TODOS = \"FETCH_TODOS\";\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const REMOVE_TODO = \"REMOVE_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\nexport const fetchAllTodos = () => {\r\n    return (dispatch) => {\r\n        axios.get(apiUrl)\r\n            .then(res => {\r\n                dispatch({\r\n                    // 요청이 성공하면, 서버 응답내용을 payload로 설정하여\r\n                    // FETCH_TODOS 액션을 디스패치 합니다.\r\n                    type: FETCH_TODOS,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}\r\nexport const addTodo = (todo) => {\r\n    return (dispatch) => {\r\n        axios.post(apiUrl, todo)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: ADD_TODO,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodo = id => {\r\n    return (dispatch) => {\r\n        axios.delete(`${apiUrl}/${id}`)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: REMOVE_TODO,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}\r\n\r\nexport const toggleTodo = todo => {\r\n    return (dispatch) => {\r\n        axios.put(`${apiUrl}/${todo.id}`, todo)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: TOGGLE_TODO,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}","import './Form.css';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo } from '../actions';\r\n\r\nclass Form extends Component {\r\n    //상태변수\r\n    state = {\r\n        input: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            input: e.target.value // input 의 다음 바뀔 값\r\n        });\r\n    }\r\n    handleCreate = () => {\r\n        //서버에게 등록할 값 보내기\r\n        this.props.addTodo(\r\n            {\r\n                text: this.state.input,\r\n                checked: false,\r\n            });\r\n        this.setState({ input: '' });\r\n    }\r\n    handleKeyPress = (e) => {\r\n        // 눌려짂 키가 Enter 이면 handleCreate 호출\r\n        if (e.key === 'Enter') {\r\n            this.handleCreate();\r\n        }\r\n    }\r\n    render() {\r\n\r\n        const { input } = this.state;\r\n        const {handleChange, handleCreate, handleKeyPress} = this;\r\n\r\n        return (\r\n            <div className=\"form\">\r\n                <input value={input} onChange={handleChange}\r\n                    onKeyPress={handleKeyPress} />\r\n                <div className=\"create-button\" onClick={handleCreate}>추가</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, { addTodo })(Form);","import React, { Component } from 'react';\r\nimport './TodoItem.css';\r\nimport { connect } from 'react-redux';\r\nimport { removeTodo, toggleTodo } from '../actions';\r\n\r\n\r\n\r\nclass TodoItem extends Component {\r\n\r\n    /* shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.todos !== nextProps.todos;\r\n    } */\r\n\r\n    handleRemove = (id) => {\r\n        this.props.removeTodo(id);\r\n    }\r\n\r\n    handleToggle = (todo) => {\r\n        this.props.toggleTodo(todo)\r\n    }\r\n\r\n\r\n    render() {\r\n        const { text, checked, id } = this.props;\r\n        const { handleRemove, handleToggle } = this;\r\n        return (\r\n            <div className=\"todo-item\" onClick={() => {\r\n                const todo = { id, text, checked };\r\n                todo.checked = !todo.checked;\r\n                handleToggle(todo)\r\n            }}>\r\n                <div className=\"remove\" onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    handleRemove(id)\r\n                }}>&times;</div>\r\n                <div className={`todo-text ${checked && 'checked'}`}>\r\n                    <div>{text}</div>\r\n                </div>\r\n                {\r\n                    checked && (<div className=\"check-mark\">✓</div>)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, { removeTodo, toggleTodo })(TodoItem);\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport { connect } from 'react-redux'\r\nimport { fetchAllTodos } from '../actions'\r\nclass TodoItemList extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.fetchAllTodos();\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.props.todos !== nextProps.todos;\r\n  }\r\n\r\n  render() {\r\n    const { todos } = this.props;\r\n    const todoList = todos.map(({ id, text, checked }) => (\r\n      <TodoItem\r\n        id={id}\r\n        text={text}\r\n        checked={checked}\r\n        key={id}\r\n      />\r\n    ));\r\n    return <div>{todoList}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos: state.todos\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchAllTodos })(TodoItemList);\r\n","import React, { Component } from \"react\";\nimport TodoListTemplate from \"./components/TodoListTemplate\";\nimport Form from \"./components/Form\";\nimport TodoItemList from \"./components/TodoItemList\";\n\nclass App extends Component {\n  state = {\n    todos: []\n  };\n\n  render() {\n    return (\n      <TodoListTemplate\n        form={\n          <Form />\n        }\n      >\n        <TodoItemList />\n      </TodoListTemplate>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_TODOS, ADD_TODO, REMOVE_TODO, TOGGLE_TODO } from '../actions';\r\nconst initialState = {\r\n    todos: [\r\n        {\r\n            id: 0,\r\n            text: '',\r\n            checked: false,\r\n        }\r\n    ]\r\n}\r\nexport const toDoReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_TODOS:\r\n            return Object.assign({}, state, { todos: action.payload });\r\n        case ADD_TODO:\r\n            return Object.assign({}, state, { todos: action.payload });\r\n        case REMOVE_TODO:\r\n            return Object.assign({}, state, { todos: action.payload });\r\n        case TOGGLE_TODO:\r\n            return Object.assign({}, state, { todos: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { toDoReducer } from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(toDoReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}